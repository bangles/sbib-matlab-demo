% TYPE OF CONNECTIVITY
% TYPE:
%  '2D_4'   2D Face                 (4 connectivity)        
%  '2D_8'   2D Face/Vertex          (8 connectivity)
%  '3D_6'   3D Face                 (6 connectivity)
%  '3D_18'  3D Face/Edge            (18 connectivity)
%  '3D_26'  3D Face/Edge/Vertex     (26 connectivity)
function [gcount, G] = conncomp( I, TYPE, STYPE )

% ALLOCATE MEMORY
G = zeros( size(I) ); % label of conn component
NEIGHBORS = neighbors_gen_type(TYPE);
if nargin == 2, STYPE = 'full'; end;
SEEDS = seeds_gen(STYPE);

% search for a possible seed
gcount = 0; % initially there are 0 clusters
for i=SEEDS
   if G(i)==0 && I(i)==1 % if not visited and should be
      gcount = gcount + 1; % new cluster found
      % mydisp('%d is a seed of cluster: %d',i,gcount);
      G(i) = gcount;
      recursive_call(i,gcount); % explore current cluster
   end
end

% depth first exploration, no need for queue
function recursive_call(j,rec_gcount)
   % mydisp('%d has been recursively marked',j);
   G(j) = rec_gcount; % mark current as done
   for n = NEIGHBORS{j}
      if G(n)==0 && I(n)==1
         recursive_call(n,rec_gcount);
      end
   end
end

function S = seeds_gen(STYPE)
   switch STYPE
      case 'full'
         S = 1:length(I(:));
      case '2D_4'
         S = [2, 4, 6, 8];
   end
end

function N = neighbors_gen_type(TYPE)
   switch TYPE
      case '2D_4'
         N = cell(9,1);
         N{1} = [2, 4];
         N{2} = [1, 3, 5];
         N{3} = [2, 6];
         N{4} = [1, 5, 7];
         N{5} = [2, 4, 6, 8];
         N{6} = [3, 5, 9];
         N{7} = [4, 8];
         N{8} = [5, 7, 9];
         N{9} = [6, 8];
      case '2D_8'
         N = cell(9,1);
         N{1} = [2, 4, 5];
         N{2} = [1, 3, 4, 5, 6];
         N{3} = [2, 5, 6];
         N{4} = [1, 2, 5, 7, 8];
         N{5} = [1, 2, 3, 4, 6, 7, 8, 9];
         N{6} = [2, 3, 5, 8, 9];
         N{7} = [4, 5, 8];
         N{8} = [4, 5, 6, 7, 9];
         N{9} = [5, 6, 8];
      
      case '3D_6'
         N = cell(27,1);
         N{1} = [2, 4, 10];
         N{2} = [1, 3, 5, 11];
         N{3} = [2, 6, 12];
         N{4} = [1, 5, 7, 13];
         N{5} = [2, 4, 6, 8, 14];
         N{6} = [3, 5, 9, 15];
         N{7} = [4, 8, 16];
         N{8} = [5, 7, 9, 17];
         N{9} = [6, 8, 18];
         N{10} = [1, 11, 13, 19];
         N{11} = [2, 10, 12, 14, 20];
         N{12} = [3, 11, 15, 21];
         N{13} = [4, 10, 14, 16, 22];
         N{14} = [5, 11, 13, 15, 17, 23];
         N{15} = [6, 12, 14, 18, 24];
         N{16} = [7, 13, 17, 25];
         N{17} = [8, 14, 16, 18, 26];
         N{18} = [9, 15, 17, 27];
         N{19} = [10, 20, 22];
         N{20} = [11, 19, 21, 23];
         N{21} = [12, 20, 24];
         N{22} = [13, 19, 23, 25];
         N{23} = [14, 20, 22, 24, 26];
         N{24} = [15, 21, 23, 27];
         N{25} = [16, 22, 26];
         N{26} = [17, 23, 25, 27];
         N{27} = [18, 24, 26];
         
      case '3D_18'
         N{1} = [2, 4, 5, 10, 11, 13];
         N{2} = [1, 3, 4, 5, 6, 10, 11, 12, 14];
         N{3} = [2, 5, 6, 11, 12, 15];
         N{4} = [1, 2, 5, 7, 8, 10, 13, 14, 16];
         N{5} = [1, 2, 3, 4, 6, 7, 8, 9, 11, 13, 14, 15, 17];
         N{6} = [2, 3, 5, 8, 9, 12, 14, 15, 18];
         N{7} = [4, 5, 8, 13, 16, 17];
         N{8} = [4, 5, 6, 7, 9, 14, 16, 17, 18];
         N{9} = [5, 6, 8, 15, 17, 18];
         N{10} = [1, 2, 4, 11, 13, 14, 19, 20, 22];
         N{11} = [1, 2, 3, 5, 10, 12, 13, 14, 15, 19, 20, 21, 23];
         N{12} = [2, 3, 6, 11, 14, 15, 20, 21, 24];
         N{13} = [1, 4, 5, 7, 10, 11, 14, 16, 17, 19, 22, 23, 25];
         N{14} = [2, 4, 5, 6, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 22, 23, 24, 26];
         N{15} = [3, 5, 6, 9, 11, 12, 14, 17, 18, 21, 23, 24, 27];
         N{16} = [4, 7, 8, 13, 14, 17, 22, 25, 26];
         N{17} = [5, 7, 8, 9, 13, 14, 15, 16, 18, 23, 25, 26, 27];
         N{18} = [6, 8, 9, 14, 15, 17, 24, 26, 27];
         N{19} = [10, 11, 13, 20, 22, 23];
         N{20} = [10, 11, 12, 14, 19, 21, 22, 23, 24];
         N{21} = [11, 12, 15, 20, 23, 24];
         N{22} = [10, 13, 14, 16, 19, 20, 23, 25, 26];
         N{23} = [11, 13, 14, 15, 17, 19, 20, 21, 22, 24, 25, 26, 27];
         N{24} = [12, 14, 15, 18, 20, 21, 23, 26, 27];
         N{25} = [13, 16, 17, 22, 23, 26];
         N{26} = [14, 16, 17, 18, 22, 23, 24, 25, 27];
         N{27} = [15, 17, 18, 23, 24, 26];
         
      case '3D_26'
         N{1} = [2, 4, 5, 10, 11, 13, 14];
         N{2} = [1, 3, 4, 5, 6, 10, 11, 12, 13, 14, 15];
         N{3} = [2, 5, 6, 11, 12, 14, 15];
         N{4} = [1, 2, 5, 7, 8, 10, 11, 13, 14, 16, 17];
         N{5} = [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18];
         N{6} = [2, 3, 5, 8, 9, 11, 12, 14, 15, 17, 18];
         N{7} = [4, 5, 8, 13, 14, 16, 17];
         N{8} = [4, 5, 6, 7, 9, 13, 14, 15, 16, 17, 18];
         N{9} = [5, 6, 8, 14, 15, 17, 18];
         N{10} = [1, 2, 4, 5, 11, 13, 14, 19, 20, 22, 23];
         N{11} = [1, 2, 3, 4, 5, 6, 10, 12, 13, 14, 15, 19, 20, 21, 22, 23, 24];
         N{12} = [2, 3, 5, 6, 11, 14, 15, 20, 21, 23, 24];
         N{13} = [1, 2, 4, 5, 7, 8, 10, 11, 14, 16, 17, 19, 20, 22, 23, 25, 26];
         N{14} = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27];
         N{15} = [2, 3, 5, 6, 8, 9, 11, 12, 14, 17, 18, 20, 21, 23, 24, 26, 27];
         N{16} = [4, 5, 7, 8, 13, 14, 17, 22, 23, 25, 26];
         N{17} = [4, 5, 6, 7, 8, 9, 13, 14, 15, 16, 18, 22, 23, 24, 25, 26, 27];
         N{18} = [5, 6, 8, 9, 14, 15, 17, 23, 24, 26, 27];
         N{19} = [10, 11, 13, 14, 20, 22, 23];
         N{20} = [10, 11, 12, 13, 14, 15, 19, 21, 22, 23, 24];
         N{21} = [11, 12, 14, 15, 20, 23, 24];
         N{22} = [10, 11, 13, 14, 16, 17, 19, 20, 23, 25, 26];
         N{23} = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27];
         N{24} = [11, 12, 14, 15, 17, 18, 20, 21, 23, 26, 27];
         N{25} = [13, 14, 16, 17, 22, 23, 26];
         N{26} = [13, 14, 15, 16, 17, 18, 22, 23, 24, 25, 27];
         N{27} = [14, 15, 17, 18, 23, 24, 26];
   end  
end

end % CLOSING OF FUNCTION

