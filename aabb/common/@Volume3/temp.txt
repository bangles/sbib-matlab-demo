Index: trace_rays_MEX.cpp
===================================================================
--- trace_rays_MEX.cpp	(revision 1584)
+++ trace_rays_MEX.cpp	(working copy)
@@ -1,268 +1,111 @@
-// %VOLUME3_TRACE_RAYS_MEX Trace rays on a volume
-// %
-// % Volume3_trace_rays_MEX(volobj, vol1, vol2, rays)
-// %
-// % Input:
-// %   - volobj: an object of the class Volume3
-// %   - vol1: first volume to be operated on, double array of 3 dimensions
-// %   - vol2: second volume to be operated on, of the same dimensions and
-// %   size of vol1
-// %   - rays: cell complex of dimensions <nr x 1>, where 'nr' is the
-// %   number of rays. Each ray rays{i} is an object of the class Ray3 with
-// %   two properties: 'o' the origin of the ray (a 3D vector), and 'd' the
-// %   direction of the ray (a 3D vector)
-// %   - delta: scalar behind which trace ray
-// %
-// % Output:
-// %  - A modified 'vol1' containing the traced rays
-// %
-// % Right now, the function traces all rays and stores a 1 in a voxel of
-// % vol1 if any ray passed through the voxel. vol2 in not touched in the
-// % current implementation (it might hold the distance field in a future
-// % implementation).
-
 #include <mex.h>
 #include <math.h>
 #include <unistd.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
-#include <list>
 
-using namespace std;
+#define SIMPLYMARK
 
-/* Macro to get the index of an element in a 3D vector */
-#define indx(i,j,k,M,N) ( (i)+((j)+(k)*(N))*(M) )
+// Macro to get the index of an element in a 3D vector
+#define indx(i,j,k) ( (i)+((j)+(k)*(dims[1]))*(dims[0]) )
 
-/* Prototypes */
-void trace_ray_fast(double* T, int dim, double *vol1, double *vol2, double delta, double *p, double *d, double off);
-int pos2off(double *p_min, double *p_max, const mwSize *sz, double delta, double p, int axis);
-double off2pos(double *p_min, double *p_max, const mwSize *sz, double delta, double p, int axis);
 
+void trace_ray_fast(double *p, double *d, double off);
+int pos2off(double p, int axis);
+double off2pos(double p, int axis);
+double funmap( double x, double delta );
+void project_on_ray(int Pos0, int Pos1, int Pos2, double* p, double* d, double& pt, double& pw);
+
 // Global variables to reduce #parameters
-double *p_min, *p_max, *vol1, *vol2, delta; /* Input variables as C pointers and doubles */
-const mwSize *sz1, *sz2; /* Size of input volumes */
+double* pmin;
+double* pmax;
+double  delta;
+int ndims;
+int dims[3];
+double* f;
+double* w;
 
-/* Main MEX function */
-/* This function gets all the data from the parameters passed to the MEX
- * function and then calls the trace ray function for each individual
- * ray */
-void mexFunction(int nlhs, mxArray *plhs[],
-        int nrhs, const mxArray *prhs[]){
-const mxArray *mVol, *mVol1, *mRays, *mOffset; /* Input variables as matlab pointers */
-mxArray *mVol2;
-const mxArray *mTemp, *mTemp1, *mTemp2; /* Temprary matlab pointers */
-double *temp; /* Temporary pointer */
-int dim1, dim2; /* Dimensions of input volumes */
-int nr; /* Number of rays */
-double *o, *d; /* Origin and direction of a ray */
-mxArray *entry; /* A cell array entry */
-mxArray *field; /* A property of an object */
-int i; /* Loop */
-
-
-    /**** Check and get input parameters ****/
-
-    /* A lot of boring code to check the consistency of the input */
-
-    /* Check number of input and output parameters */
-    if (nrhs != 4)
-        mexErrMsgTxt("Must have 4 input arguments");
-    if (nlhs != 0)
-        mexErrMsgTxt("Must have 0 output arguments");
-
-    /* Get input parameters and assign to matlab pointers */
-    mVol    = prhs[0];
-    mVol1   = prhs[1];
-    mVol2   = mxCreateNumericArray(3, mxGetDimensions(mVol1), mxDOUBLE_CLASS, mxREAL);
-    mRays   = prhs[2];
-    mOffset = prhs[3];  
-        
-    /* Check type of input parameters */
-    if (!mxIsClass(mVol, "Volume3")){
-        mexErrMsgTxt("volobj should be an object of class Volume3");
-    }
-    if (!mxIsDouble(mVol1)){
-        mexErrMsgTxt("vol1 should be a matrix of doubles");
-    }
-    if (!mxIsDouble(mVol2)){
-        mexErrMsgTxt("vol2 should be a matrix of doubles");
-    }
-    if (!mxIsCell(mRays)){
-        mexErrMsgTxt("rays should be a cell complex");
-    }
-    if (!mxIsDouble(mOffset)){
-        mexErrMsgTxt("offset should be a scalar double");
-    }
-
-    /* Check size of input parameters */
-    /* Grids */
-    dim1 = mxGetNumberOfDimensions(mVol1);
-    dim2 = mxGetNumberOfDimensions(mVol2);
-    if (dim1 != dim2){
-        mexErrMsgTxt("dimensions of vol1 and vol2 are different");
-    }
-    if (dim1 != 3){
-        mexErrMsgTxt("dimension of vol1 and vol2 is not 3");
-    }
-    sz1 = mxGetDimensions(mVol1);
-    sz2 = mxGetDimensions(mVol2);
-    for (i = 0; i < dim1; i++){
-        if (sz1[i] != sz2[i]){
-            mexErrMsgTxt("vol1 and vol2 differ in the size of one of the dimensions");
-        }
-    }
-    vol1 = mxGetPr(mVol1);
-    if (!vol1){
-        mexErrMsgTxt("pointer to vol1 is broken");
-    }
-    
-    vol2 = mxGetPr(mVol2);
-    if (!vol2){
-        mexErrMsgTxt("pointer to vol2 is broken");
-    }
-
-    /* Rays */
-    if (mxGetN(mRays) != 1){
-        mexErrMsgTxt("rays should be a cell complex with only one column");
-    }
-
-    /* Get data from Volume3 object and check their size */
-    /* Bounding box */
-    mTemp = mxGetProperty(mVol, 0, "bbox");
-    if (!mTemp){
-        mexErrMsgTxt("could not retrieve property 'bbox' from Volume3 object");
-    }
-    mTemp1 = mxGetProperty(mTemp, 0, "pMin");
-    if (!mTemp1){
-        mexErrMsgTxt("could not retrieve property 'pMin' from Box3 object");
-    }
-    if ((mxGetM(mTemp1) != 1) || (mxGetN(mTemp1) != 3)){
-        mexErrMsgTxt("invalid dimensions for pMin in Box3 object");
-    }
-    p_min = mxGetPr(mTemp1);
-    if (!p_min){
-        mexErrMsgTxt("pointer to pMin data is broken");
-    }
-    mTemp2 = mxGetProperty(mTemp, 0, "pMax");
-    if (!mTemp2){
-        mexErrMsgTxt("could not retrieve property 'pMax' from Box3 object");
-    }
-    if ((mxGetM(mTemp2) != 1) || (mxGetN(mTemp2) != 3)){
-        mexErrMsgTxt("invalid dimensions for pMax in Box3 object");
-    }
-    p_max = mxGetPr(mTemp2);
-    if (!p_max){
-        mexErrMsgTxt("pointer to pMax data is broken");
-    }
-
-    /* Offset */
-    double offset = mxGetPr( mOffset )[0];
-    
-    /* Delta */
-    mTemp = mxGetProperty(mVol, 0, "delta");
-    if (!mTemp){
-        mexErrMsgTxt("could not retrieve property 'delta' from Volume3 object");
-    }
-    if ((mxGetM(mTemp) != 1) && (mxGetN(mTemp) != 1)){
-        mexErrMsgTxt("delta should be a scalar value");
-    }
-    temp = mxGetPr(mTemp);
-    if (!temp){
-        mexErrMsgTxt("pointer for data of property 'delta' is broken");
-    }
-    delta = (*temp);
-
-    /* Get size information for rays */
-    nr = mxGetM(mRays);
-    if (nr == 0){
-        mexErrMsgTxt("no rays to be traced (0 rays)");
-    }
-
-    // Creates a traversal buffer of zeros
-    // mxArray* T_mxa = mxCreateNumericArray(3, sz1, mxDOUBLE_CLASS, mxREAL);
-    double*  T = NULL; // mxGetPr( T_mxa );
-       
-    /**** Trace rays ****/
-    for (i = 0; i < nr; i++){
-        /* Get current ray */
-        entry = mxGetCell(mRays, i);
-        if (!entry){
-            mexErrMsgTxt("could not retrieve entry from cell array");
-        }
-        if (!mxIsClass(entry, "Ray3")){
-            mexErrMsgTxt("entry of rays is not an object of class Ray3");
-        }
-        /* Get origin */
-        field = mxGetProperty(entry, 0, "o");
-        if (!field){
-            mexErrMsgTxt("could not retrieve property 'o' from object");
-        }
-        if ((mxGetM(field) != 1) || (mxGetN(field) != 3)){
-            mexErrMsgTxt("invalid dimensions for property 'o'");
-        }
-        o = mxGetPr(field);
-        if (!o){
-            mexErrMsgTxt("pointer for data of property 'o' is broken");
-        }
-        /* Get direction */
-        field = mxGetProperty(entry, 0, "d");
-        if (!field){
-            mexErrMsgTxt("could not retrieve property 'd' from object");
-        }
-        if ((mxGetM(field) != 1) || (mxGetN(field) != 3)){
-            mexErrMsgTxt("invalid dimensions for property 'd'");
-        }
-        d = mxGetPr(field);
-        if (!d){
-            mexErrMsgTxt("pointer for data of property 'd' is broken");
-        }
-        /* Trace ray */
-        trace_ray_fast(T, dim1, vol1, vol2, delta, o, d, offset);
-    }
-    
-    // Normalize weighted average
-    for(int I=0; I<sz1[0]*sz1[1]*sz1[2]; I++)
-       if( vol2[I] > 1e-5 )
-         vol1[I] = vol1[I] / vol2[I];
-    
-    // Free memory
-    // mxDestroyArray( T_mxa );
-    mxDestroyArray( mVol2 );
-}
-
-// Project on line and compute distance from origin + distance from line
-void project_on_ray(int Pos0, int Pos1, int Pos2, double* p, double* d, double& pt, double& pw){
-   // mexPrintf("p=[%.2f %.2f %.2f];\n", off2pos( p_min, p_max, sz1, delta, Pos0, 0 ), off2pos( p_min, p_max, sz1, delta, Pos1, 1 ), off2pos( p_min, p_max, sz1, delta, Pos2, 2 ) );
-   // mexPrintf("o=[%.2f %.2f %.2f]\n", p[0],p[1],p[2]);
-   // mexPrintf("d=[%.2f %.2f %.2f]\n", d[0],d[1],d[2]);
+// Core
+void mexFunction(int nlhs, mxArray *plhs[],int nrhs, const mxArray *prhs[]){
+   //--------------------------------------------------------------------------------//
+   //                             INPUT PARAMETERS
+   // function(rays_o, rays_d, startat, this.grids.(field), delta, pmin, pmax )
+   //--------------------------------------------------------------------------------// 
+   if(nrhs != 8) mexErrMsgTxt("8 parameters required! (including object pointer)");
+   // rays_o
+   const mxArray* rays_o_mxa = prhs[1];
+   double* rays_o = mxGetPr(rays_o_mxa);
+   int nrays = mxGetDimensions(rays_o_mxa)[0]; //mxGetM(rays_o_mxa);
+   // rays_d
+   const mxArray* rays_d_mxa = prhs[2];
+   double* rays_d = mxGetPr(rays_d_mxa);
+   // startat 
+   const mxArray* startat_mxa = prhs[3];
+   double startat = mxGetScalar(startat_mxa);
+   // field
+   const mxArray* f_mxa = prhs[4];
+   f = mxGetPr(f_mxa);
+   ndims = mxGetNumberOfDimensions(f_mxa);
+   const mwSize* dims_mxa = mxGetDimensions(f_mxa);
+   dims[0] = (ndims>0) ? dims_mxa[0] : 1;
+   dims[1] = (ndims>1) ? dims_mxa[1] : 1;
+   dims[2] = (ndims>2) ? dims_mxa[2] : 1;
+   mexPrintf("%d %d %d\n",dims[0],dims[1],dims[2]);
+   // delta
+   const mxArray* delta_mxa = prhs[5];
+   delta = mxGetScalar(delta_mxa);
+   mexPrintf("delta: %.2f\n",delta);
+   // pmin
+   const mxArray* pmin_mxa = prhs[6];
+   pmin = mxGetPr(pmin_mxa);
+   // pmax
+   const mxArray* pmax_mxa = prhs[7];
+   pmax = mxGetPr(pmax_mxa);
+     
+   //--------------------------------------------------------------------------------//
+   //                         LOCAL MEMORY ALLOCATION
+   //--------------------------------------------------------------------------------//  
+   #ifndef SIMPLYMARK
+   mxArray* w_mxa = mxCreateNumericArray(ndims, dims, mxDOUBLE_CLASS, mxREAL);
+   w = mxGetPr( w_mxa );
+   #endif
    
-   double cvp[3]={0,0,0}; // calculation buffer
-   cvp[0] = off2pos( p_min, p_max, sz1, delta, Pos0, 0 ) - p[0];
-   cvp[1] = off2pos( p_min, p_max, sz1, delta, Pos1, 1 ) - p[1];
-   cvp[2] = off2pos( p_min, p_max, sz1, delta, Pos2, 2 ) - p[2];
-   pt = cvp[0]*d[0] + cvp[1]*d[1] + cvp[2]*d[2];
-   cvp[0] -= (d[0]*pt);
-   cvp[1] -= (d[1]*pt);
-   cvp[2] -= (d[2]*pt);
-   pw = sqrt( cvp[0]*cvp[0] + cvp[1]*cvp[1] + cvp[2]*cvp[2] );                
+   //--------------------------------------------------------------------------------//
+   //                               RUN TRACING 
+   //--------------------------------------------------------------------------------//  
+   double* xo = rays_o+0*nrays;
+   double* yo = rays_o+1*nrays;
+   double* zo = rays_o+2*nrays;
+   double* xd = rays_d+0*nrays;
+   double* yd = rays_d+1*nrays;
+   double* zd = rays_d+2*nrays;
+   for(int n = 0; n < nrays; n++){
+      // Retrieve ray...
+      double o[3] = {xo[n],yo[n],zo[n]};
+      double d[3] = {xd[n],yd[n],zd[n]};
+      mexPrintf("ray: [%.2f %.2f %.2f] [%.2f %.2f %.2f]\n", o[0],o[1],o[2], d[0],d[1],d[2]);      
+      trace_ray_fast(o, d, startat);
+   }
+   
+   //--------------------------------------------------------------------------------//
+   //                            NORMALIZE TRACING 
+   //--------------------------------------------------------------------------------//    
+   // Normalize weighted average
+   #ifndef SIMPLYMARK
+   for(int I=0; I<dims[0]*dims[1]*dims[2]; I++)
+      if( w[I] > 1e-5 )
+        f[I] = f[I] / w[I];
+   // Free memory
+   mxDestroyArray( w_mxa );
+   #endif
+   
+   return;
 }
 
-// returns:
-// x<1:   1-3|x|^2+2|x|^3 
-// x>1:   0
-double funmap( double x, double delta ){
-   x = fabs(x)/delta;
-   if( x>1 ) return 0;
-   // return 1.0 -3.0*x*x + 2*x*x*x;
-   return 1.0-x;
-}
-
 /* Trace a single ray */
-void trace_ray_fast(double* T, int dim, double *vol1, double *vol2, double delta, double *p, double *d, double off){
+void trace_ray_fast(double *p, double *d, double off){
     // mexPrintf("off: %.2f\n", off);
-    
-    /* Code modified from gridaccell.{c,h} follows */
     float rayT = 1e-20;
 
     /* We want to test intersections "off" distance behind the ray as well */
@@ -283,18 +126,20 @@
     float NextCrossingT[3], DeltaT[3];
     int Step[3], Out[3], Pos[3];
     /* Iterate through all the axes */
-    for (int axis = 0; axis < dim; ++axis) {
+    for (int axis = 0; axis < ndims; ++axis) {
         /* Compute current voxel for this axis */
-        Pos[axis] = pos2off(p_min, p_max, sz1, delta, p[axis], axis);
+        Pos[axis] = pos2off(p[axis], axis);
+        mexPrintf("Pos[%d] = %d\n",axis,Pos[axis]); 
         if (d[axis] >= 0) {
-            NextCrossingT[axis] = fabs( rayT + (off2pos(p_min, p_max, sz1, delta, Pos[axis]+1, axis)-p[axis]-.5*delta) / d[axis] );
+            NextCrossingT[axis] = fabs( rayT + (off2pos(Pos[axis]+1, axis)-p[axis]-.5*delta) / d[axis] );
             DeltaT[axis] = delta / d[axis];
             Step[axis] = 1;
-            Out[axis] = sz1[axis];
+            Out[axis] = dims[axis];
+            mexPrintf("Out[%d] = %d\n",axis,Out[axis]);            
         }
         else {
             /* Handle ray with negative direction for voxel stepping */
-            NextCrossingT[axis] = fabs( rayT + (off2pos(p_min, p_max, sz1, delta, Pos[axis], axis)-p[axis]-.5*delta) / d[axis] );
+            NextCrossingT[axis] = fabs( rayT + (off2pos(Pos[axis], axis)-p[axis]-.5*delta) / d[axis] );
             DeltaT[axis] = -delta / d[axis];
             Step[axis] = -1;
             Out[axis] = -1;
@@ -309,88 +154,69 @@
     /* Walk ray through voxel grid */
     double pt=0; // distance from origina of ray
     double pw=0; // distance projection between ray and voxel
-    int    I=0;  // index to access vol1,vol2
-    int i,j,k;   // 
-    list<int> tounmark;
-    double delta15 = 1.5*delta;
+    int I=0;     // index to access vol1,vol2
+    int i,j,k;   // ???
     for (;;){
-        //--- Store pointer to the ray in the structure
-        // Val( Pos[0], Pos[1], Pos[2] ).push_back( &pray );
-        
-        // mexPrintf("Marked point: %d %d %d\n",Pos[0],Pos[1],Pos[2]);
-        // #define FAT_RAYS
-        #ifdef FAT_RAYS
-           //--- Visit curr & all its neighbors setting pt, pw
-           i = Pos[0]; j = Pos[1]; k = Pos[2];
-           int nei_i[7] = {i,i+1,i,i-1,i,i,i};
-           int nei_j[7] = {j,j,j+1,j,j-1,j,j};
-           int nei_k[7] = {k,k,k,k,k,k-1,k+1};
-           for( int s=0; s<7; ++s ){
-              int ii = nei_i[s];
-              int jj = nei_j[s];
-              int kk = nei_k[s];
-              if( ii>=0 && jj>=0 && kk>=0 && ii< sz1[0] && jj< sz1[1] && kk< sz1[2] ){
-                 I = indx(ii, jj, kk, sz1[0], sz1[1]);
-                 if( T[I] == 0 ){
-                    // Mark and keep track of marking
-                    T[I] = 1;
-                    tounmark.push_back(I);
-                    // Compute pt,pw and set
-                    project_on_ray(ii,jj,kk, p, d, pt, pw);
-                    pw = funmap( pw, delta15 );
-                    vol1[I] += pt; // pw*pt;
-                    vol2[I] += pw;
-                 }
-              }
-           }
-        #endif
-                   
-        #ifdef ONEZERO
-           //--- Simply set the voxel to 1 if the ray passed through it
-           i = Pos[0]; j = Pos[1]; k = Pos[2];
-           I = indx(i, j, k, sz1[0], sz1[1]);
-           vol1[ I ] = 1;
-        #endif 
-                   
-        #define THIN_RAYS
-        #ifdef THIN_RAYS
-           i = Pos[0]; j = Pos[1]; k = Pos[2];
-           I = indx(i, j, k, sz1[0], sz1[1]);
-           project_on_ray(i,j,k,p,d,pt,pw);
-           vol1[ I ] = pw*pt;
-           vol2[ I ] = pw;
-        #endif
-                
-        /* Advance to next voxel */
-        int bits = ((NextCrossingT[0] < NextCrossingT[1]) << 2) +
-                   ((NextCrossingT[0] < NextCrossingT[2]) << 1) +
-                   ((NextCrossingT[1] < NextCrossingT[2]));
-        const int cmpToAxis[8] = { 2, 1, 2, 1, 2, 2, 0, 0 };
-        int stepAxis = cmpToAxis[bits];
-        /* qDebug() << "STEPAXIS" << stepAxis; */
-        Pos[stepAxis] += Step[stepAxis];
-        if (Pos[stepAxis] == Out[stepAxis])
-            break;
-        NextCrossingT[stepAxis] += DeltaT[stepAxis];
-    }
-        
-    // Clear marking of T
-    while( !tounmark.empty() ){
-       T[ tounmark.back() ] = 0;
-       tounmark.pop_back();
-    }
+       //--- Mark in fields
+       i = Pos[0]; j = Pos[1]; k = Pos[2];
+       I = indx(i, j, k);
+       project_on_ray(i,j,k,p,d,pt,pw);
+       #ifndef SIMPLYMARK
+         f[ I ] = pw*pt;
+         w[ I ] = pw;
+       #else
+         f[ I ] = 1;
+       #endif
+               
+       //--- Advance to next voxel
+       int bits = ((NextCrossingT[0] < NextCrossingT[1]) << 2) +
+                  ((NextCrossingT[0] < NextCrossingT[2]) << 1) +
+                  ((NextCrossingT[1] < NextCrossingT[2]));
+       const int cmpToAxis[8] = { 2, 1, 2, 1, 2, 2, 0, 0 };
+       int stepAxis = cmpToAxis[bits];
+       Pos[stepAxis] += Step[stepAxis];
+       mexPrintf("Stepped on %d of %d\n",stepAxis,Step[stepAxis]);
+       if (Pos[stepAxis] == Out[stepAxis])
+           break;
+       NextCrossingT[stepAxis] += DeltaT[stepAxis];
+    }        
 }
 
-/* These two functions are independent of the dimension */
-int pos2off(double *p_min, double *p_max, const mwSize *sz, double delta, double p, int axis){
-int ret;
-    ret = (int) roundf( (p - p_min[axis])/delta );
-    /* Return -1 if out of the volume */
-    if ((ret < 0) || (ret > sz[axis]))
-         mexErrMsgTxt("offsetted ray goes out of bounds!!");
-    return ret;
+// Project on line and compute distance from origin + distance from line
+void project_on_ray(int Pos0, int Pos1, int Pos2, double* p, double* d, double& pt, double& pw){
+   // mexPrintf("p=[%.2f %.2f %.2f];\n", off2pos( p_min, p_max, sz1, delta, Pos0, 0 ), off2pos( p_min, p_max, sz1, delta, Pos1, 1 ), off2pos( p_min, p_max, sz1, delta, Pos2, 2 ) );
+   // mexPrintf("o=[%.2f %.2f %.2f]\n", p[0],p[1],p[2]);
+   // mexPrintf("d=[%.2f %.2f %.2f]\n", d[0],d[1],d[2]);
+   
+   double cvp[3]={0,0,0}; // calculation buffer
+   cvp[0] = off2pos( Pos0, 0 ) - p[0];
+   cvp[1] = off2pos( Pos1, 1 ) - p[1];
+   cvp[2] = off2pos( Pos2, 2 ) - p[2];
+   pt = cvp[0]*d[0] + cvp[1]*d[1] + cvp[2]*d[2];
+   cvp[0] -= (d[0]*pt);
+   cvp[1] -= (d[1]*pt);
+   cvp[2] -= (d[2]*pt);
+   pw = sqrt( cvp[0]*cvp[0] + cvp[1]*cvp[1] + cvp[2]*cvp[2] );                
 }
 
-double off2pos(double *p_min, double *p_max, const mwSize *sz, double delta, double p, int axis){
-    return (p)*delta + p_min[axis];
+// returns:
+// x<1:   1-3|x|^2+2|x|^3 
+// x>1:   0
+double funmap( double x, double delta ){
+   x = fabs(x)/delta;
+   if( x>1 ) return 0;
+   // return 1.0 -3.0*x*x + 2*x*x*x;
+   return 1.0-x;
 }
+
+/* These two functions are independent of the dimension */
+int pos2off(double p, int axis){
+   int ret = (int) roundf( (p - pmin[axis])/delta );
+   /* Return -1 if out of the volume */
+   if ((ret < 0) || (ret > dims[axis]))
+      mexErrMsgTxt("offsetted ray goes out of bounds!!");
+   return ret;
+}
+double off2pos(double p, int axis){
+   return (p)*delta + pmin[axis];
+}
